/*
Copyright (c) 2020, 2021 by BittWare, Inc., A Molex Company 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/*
	1D FFT pipeline.
	One pair of words in one pair of words out per clock cycle.
	Used by 1D, 2D and 3D transforms

	This FFT is hard coded for a 1024 sample FFT.
*/

#include "FFT_1d.h"


void ButterFly_fpga(float2 a, float2 b, float2* a_out, float2* b_out, float2 w)
{
	float real_r, imag_r;
	real_r = b[0] * w[0] - b[1] * w[1];
	imag_r = b[0] * w[1] + b[1] * w[0];
	(*a_out)[0] = a[0] + real_r;
	(*a_out)[1] = a[1] + imag_r;
	(*b_out)[0] = a[0] - real_r;
	(*b_out)[1] = a[1] - imag_r;
}

/*
	Delay inputs long enough that pairs can align.
	E.g. Stage 1 will wait for 2 words,
		 Stage 2 will wait for 4 words,
		 Stage 4 will wait for 8 words, etc...
*/
template<int _STAGE_>
void Stage_fpga(float2 a, float2 b, float2* a_out, float2* b_out, unsigned short index, short Delay, short A, short n, short mask,
	float2 delay_a[MAX_DELAY],
	float2 delay_b[MAX_DELAY * 2],
	float2 delay_b_n[MAX_DELAY],
	unsigned short delay_index[MAX_DELAY]
)
{
	const float weights_stage_9[512][2] = {
		{ 1.000000,0.000000 },{ 0.999981,-0.00613588467 },{ 0.999925,-0.012272 },{ 0.999831,-0.018407 },{ 0.999699,-0.024541 },{ 0.999529,-0.030675 },{ 0.999322,-0.036807 },{ 0.999078,-0.042938 },
	{ 0.998795,-0.049068 },{ 0.998476,-0.055195 },{ 0.998118,-0.061321 },{ 0.997723,-0.067444 },{ 0.997290,-0.073565 },{ 0.996820,-0.079682 },{ 0.996313,-0.085797 },{ 0.995767,-0.091909 },
	{ 0.995185,-0.098017 },{ 0.994565,-0.104122 },{ 0.993907,-0.110222 },{ 0.993212,-0.116319 },{ 0.992480,-0.122411 },{ 0.991710,-0.128498 },{ 0.990903,-0.134581 },{ 0.990058,-0.140658 },
	{ 0.989177,-0.146730 },{ 0.988258,-0.152797 },{ 0.987301,-0.158858 },{ 0.986308,-0.164913 },{ 0.985278,-0.170962 },{ 0.984210,-0.177004 },{ 0.983105,-0.183040 },{ 0.981964,-0.189069 },
	{ 0.980785,-0.195090 },{ 0.979570,-0.201105 },{ 0.978317,-0.207111 },{ 0.977028,-0.213110 },{ 0.975702,-0.219101 },{ 0.974339,-0.225084 },{ 0.972940,-0.231058 },{ 0.971504,-0.237024 },
	{ 0.970031,-0.242980 },{ 0.968522,-0.248928 },{ 0.966976,-0.254866 },{ 0.965394,-0.260794 },{ 0.963776,-0.266713 },{ 0.962121,-0.272621 },{ 0.960431,-0.278520 },{ 0.958703,-0.284408 },
	{ 0.956940,-0.290285 },{ 0.955141,-0.296151 },{ 0.953306,-0.302006 },{ 0.951435,-0.307850 },{ 0.949528,-0.313682 },{ 0.947586,-0.319502 },{ 0.945607,-0.325310 },{ 0.943593,-0.331106 },
	{ 0.941544,-0.336890 },{ 0.939459,-0.342661 },{ 0.937339,-0.348419 },{ 0.935184,-0.354164 },{ 0.932993,-0.359895 },{ 0.930767,-0.365613 },{ 0.928506,-0.371317 },{ 0.926210,-0.377007 },
	{ 0.923880,-0.382683 },{ 0.921514,-0.388345 },{ 0.919114,-0.393992 },{ 0.916679,-0.399624 },{ 0.914210,-0.405241 },{ 0.911706,-0.410843 },{ 0.909168,-0.416430 },{ 0.906596,-0.422000 },
	{ 0.903989,-0.427555 },{ 0.901349,-0.433094 },{ 0.898674,-0.438616 },{ 0.895966,-0.444122 },{ 0.893224,-0.449611 },{ 0.890449,-0.455084 },{ 0.887640,-0.460539 },{ 0.884797,-0.465976 },
	{ 0.881921,-0.471397 },{ 0.879012,-0.476799 },{ 0.876070,-0.482184 },{ 0.873095,-0.487550 },{ 0.870087,-0.492898 },{ 0.867046,-0.498228 },{ 0.863973,-0.503538 },{ 0.860867,-0.508830 },
	{ 0.857729,-0.514103 },{ 0.854558,-0.519356 },{ 0.851355,-0.524590 },{ 0.848120,-0.529804 },{ 0.844854,-0.534998 },{ 0.841555,-0.540171 },{ 0.838225,-0.545325 },{ 0.834863,-0.550458 },
	{ 0.831470,-0.555570 },{ 0.828045,-0.560662 },{ 0.824589,-0.565732 },{ 0.821103,-0.570781 },{ 0.817585,-0.575808 },{ 0.814036,-0.580814 },{ 0.810457,-0.585798 },{ 0.806848,-0.590760 },
	{ 0.803208,-0.595699 },{ 0.799537,-0.600616 },{ 0.795837,-0.605511 },{ 0.792107,-0.610383 },{ 0.788346,-0.615232 },{ 0.784557,-0.620057 },{ 0.780737,-0.624859 },{ 0.776888,-0.629638 },
	{ 0.773010,-0.634393 },{ 0.769103,-0.639124 },{ 0.765167,-0.643832 },{ 0.761202,-0.648514 },{ 0.757209,-0.653173 },{ 0.753187,-0.657807 },{ 0.749136,-0.662416 },{ 0.745058,-0.667000 },
	{ 0.740951,-0.671559 },{ 0.736817,-0.676093 },{ 0.732654,-0.680601 },{ 0.728464,-0.685084 },{ 0.724247,-0.689541 },{ 0.720003,-0.693971 },{ 0.715731,-0.698376 },{ 0.711432,-0.702755 },
	{ 0.707107,-0.707107 },{ 0.702755,-0.711432 },{ 0.698376,-0.715731 },{ 0.693971,-0.720003 },{ 0.689541,-0.724247 },{ 0.685084,-0.728464 },{ 0.680601,-0.732654 },{ 0.676093,-0.736817 },
	{ 0.671559,-0.740951 },{ 0.667000,-0.745058 },{ 0.662416,-0.749136 },{ 0.657807,-0.753187 },{ 0.653173,-0.757209 },{ 0.648514,-0.761202 },{ 0.643832,-0.765167 },{ 0.639124,-0.769103 },
	{ 0.634393,-0.773010 },{ 0.629638,-0.776888 },{ 0.624859,-0.780737 },{ 0.620057,-0.784557 },{ 0.615232,-0.788346 },{ 0.610383,-0.792107 },{ 0.605511,-0.795837 },{ 0.600616,-0.799537 },
	{ 0.595699,-0.803208 },{ 0.590760,-0.806848 },{ 0.585798,-0.810457 },{ 0.580814,-0.814036 },{ 0.575808,-0.817585 },{ 0.570781,-0.821103 },{ 0.565732,-0.824589 },{ 0.560662,-0.828045 },
	{ 0.555570,-0.831470 },{ 0.550458,-0.834863 },{ 0.545325,-0.838225 },{ 0.540171,-0.841555 },{ 0.534998,-0.844854 },{ 0.529804,-0.848120 },{ 0.524590,-0.851355 },{ 0.519356,-0.854558 },
	{ 0.514103,-0.857729 },{ 0.508830,-0.860867 },{ 0.503538,-0.863973 },{ 0.498228,-0.867046 },{ 0.492898,-0.870087 },{ 0.487550,-0.873095 },{ 0.482184,-0.876070 },{ 0.476799,-0.879012 },
	{ 0.471397,-0.881921 },{ 0.465976,-0.884797 },{ 0.460539,-0.887640 },{ 0.455084,-0.890449 },{ 0.449611,-0.893224 },{ 0.444122,-0.895966 },{ 0.438616,-0.898674 },{ 0.433094,-0.901349 },
	{ 0.427555,-0.903989 },{ 0.422000,-0.906596 },{ 0.416430,-0.909168 },{ 0.410843,-0.911706 },{ 0.405241,-0.914210 },{ 0.399624,-0.916679 },{ 0.393992,-0.919114 },{ 0.388345,-0.921514 },
	{ 0.382683,-0.923880 },{ 0.377007,-0.926210 },{ 0.371317,-0.928506 },{ 0.365613,-0.930767 },{ 0.359895,-0.932993 },{ 0.354164,-0.935184 },{ 0.348419,-0.937339 },{ 0.342661,-0.939459 },
	{ 0.336890,-0.941544 },{ 0.331106,-0.943593 },{ 0.325310,-0.945607 },{ 0.319502,-0.947586 },{ 0.313682,-0.949528 },{ 0.307850,-0.951435 },{ 0.302006,-0.953306 },{ 0.296151,-0.955141 },
	{ 0.290285,-0.956940 },{ 0.284408,-0.958703 },{ 0.278520,-0.960431 },{ 0.272621,-0.962121 },{ 0.266713,-0.963776 },{ 0.260794,-0.965394 },{ 0.254866,-0.966976 },{ 0.248928,-0.968522 },
	{ 0.242980,-0.970031 },{ 0.237024,-0.971504 },{ 0.231058,-0.972940 },{ 0.225084,-0.974339 },{ 0.219101,-0.975702 },{ 0.213110,-0.977028 },{ 0.207111,-0.978317 },{ 0.201105,-0.979570 },
	{ 0.195090,-0.980785 },{ 0.189069,-0.981964 },{ 0.183040,-0.983105 },{ 0.177004,-0.984210 },{ 0.170962,-0.985278 },{ 0.164913,-0.986308 },{ 0.158858,-0.987301 },{ 0.152797,-0.988258 },
	{ 0.146730,-0.989177 },{ 0.140658,-0.990058 },{ 0.134581,-0.990903 },{ 0.128498,-0.991710 },{ 0.122411,-0.992480 },{ 0.116319,-0.993212 },{ 0.110222,-0.993907 },{ 0.104122,-0.994565 },
	{ 0.098017,-0.995185 },{ 0.091909,-0.995767 },{ 0.085797,-0.996313 },{ 0.079682,-0.996820 },{ 0.073565,-0.997290 },{ 0.067444,-0.997723 },{ 0.061321,-0.998118 },{ 0.055195,-0.998476 },
	{ 0.049068,-0.998795 },{ 0.042938,-0.999078 },{ 0.036807,-0.999322 },{ 0.030675,-0.999529 },{ 0.024541,-0.999699 },{ 0.018407,-0.999831 },{ 0.012272,-0.999925 },{ 0.006136,-0.999981 },
	{ 0.000000,-1.000000 },{ -0.006136,-0.999981 },{ -0.012272,-0.999925 },{ -0.018407,-0.999831 },{ -0.024541,-0.999699 },{ -0.030675,-0.999529 },{ -0.036807,-0.999322 },{ -0.042938,-0.999078 },
	{ -0.049068,-0.998795 },{ -0.055195,-0.998476 },{ -0.061321,-0.998118 },{ -0.067444,-0.997723 },{ -0.073565,-0.997290 },{ -0.079682,-0.996820 },{ -0.085797,-0.996313 },{ -0.091909,-0.995767 },
	{ -0.098017,-0.995185 },{ -0.104122,-0.994565 },{ -0.110222,-0.993907 },{ -0.116319,-0.993212 },{ -0.122411,-0.992480 },{ -0.128498,-0.991710 },{ -0.134581,-0.990903 },{ -0.140658,-0.990058 },
	{ -0.146730,-0.989177 },{ -0.152797,-0.988258 },{ -0.158858,-0.987301 },{ -0.164913,-0.986308 },{ -0.170962,-0.985278 },{ -0.177004,-0.984210 },{ -0.183040,-0.983105 },{ -0.189069,-0.981964 },
	{ -0.195090,-0.980785 },{ -0.201105,-0.979570 },{ -0.207111,-0.978317 },{ -0.213110,-0.977028 },{ -0.219101,-0.975702 },{ -0.225084,-0.974339 },{ -0.231058,-0.972940 },{ -0.237024,-0.971504 },
	{ -0.242980,-0.970031 },{ -0.248928,-0.968522 },{ -0.254866,-0.966976 },{ -0.260794,-0.965394 },{ -0.266713,-0.963776 },{ -0.272621,-0.962121 },{ -0.278520,-0.960431 },{ -0.284408,-0.958703 },
	{ -0.290285,-0.956940 },{ -0.296151,-0.955141 },{ -0.302006,-0.953306 },{ -0.307850,-0.951435 },{ -0.313682,-0.949528 },{ -0.319502,-0.947586 },{ -0.325310,-0.945607 },{ -0.331106,-0.943593 },
	{ -0.336890,-0.941544 },{ -0.342661,-0.939459 },{ -0.348419,-0.937339 },{ -0.354164,-0.935184 },{ -0.359895,-0.932993 },{ -0.365613,-0.930767 },{ -0.371317,-0.928506 },{ -0.377007,-0.926210 },
	{ -0.382683,-0.923880 },{ -0.388345,-0.921514 },{ -0.393992,-0.919114 },{ -0.399624,-0.916679 },{ -0.405241,-0.914210 },{ -0.410843,-0.911706 },{ -0.416430,-0.909168 },{ -0.422000,-0.906596 },
	{ -0.427555,-0.903989 },{ -0.433094,-0.901349 },{ -0.438616,-0.898674 },{ -0.444122,-0.895966 },{ -0.449611,-0.893224 },{ -0.455084,-0.890449 },{ -0.460539,-0.887640 },{ -0.465976,-0.884797 },
	{ -0.471397,-0.881921 },{ -0.476799,-0.879012 },{ -0.482184,-0.876070 },{ -0.487550,-0.873095 },{ -0.492898,-0.870087 },{ -0.498228,-0.867046 },{ -0.503538,-0.863973 },{ -0.508830,-0.860867 },
	{ -0.514103,-0.857729 },{ -0.519356,-0.854558 },{ -0.524590,-0.851355 },{ -0.529804,-0.848120 },{ -0.534998,-0.844854 },{ -0.540171,-0.841555 },{ -0.545325,-0.838225 },{ -0.550458,-0.834863 },
	{ -0.555570,-0.831470 },{ -0.560662,-0.828045 },{ -0.565732,-0.824589 },{ -0.570781,-0.821103 },{ -0.575808,-0.817585 },{ -0.580814,-0.814036 },{ -0.585798,-0.810457 },{ -0.590760,-0.806848 },
	{ -0.595699,-0.803208 },{ -0.600616,-0.799537 },{ -0.605511,-0.795837 },{ -0.610383,-0.792107 },{ -0.615232,-0.788346 },{ -0.620057,-0.784557 },{ -0.624859,-0.780737 },{ -0.629638,-0.776888 },
	{ -0.634393,-0.773010 },{ -0.639124,-0.769103 },{ -0.643832,-0.765167 },{ -0.648514,-0.761202 },{ -0.653173,-0.757209 },{ -0.657807,-0.753187 },{ -0.662416,-0.749136 },{ -0.667000,-0.745058 },
	{ -0.671559,-0.740951 },{ -0.676093,-0.736817 },{ -0.680601,-0.732654 },{ -0.685084,-0.728464 },{ -0.689541,-0.724247 },{ -0.693971,-0.720003 },{ -0.698376,-0.715731 },{ -0.702755,-0.711432 },
	{ -0.707107,-0.707107 },{ -0.711432,-0.702755 },{ -0.715731,-0.698376 },{ -0.720003,-0.693971 },{ -0.724247,-0.689541 },{ -0.728464,-0.685084 },{ -0.732654,-0.680601 },{ -0.736817,-0.676093 },
	{ -0.740951,-0.671559 },{ -0.745058,-0.667000 },{ -0.749136,-0.662416 },{ -0.753187,-0.657807 },{ -0.757209,-0.653173 },{ -0.761202,-0.648514 },{ -0.765167,-0.643832 },{ -0.769103,-0.639124 },
	{ -0.773010,-0.634393 },{ -0.776888,-0.629638 },{ -0.780737,-0.624859 },{ -0.784557,-0.620057 },{ -0.788346,-0.615232 },{ -0.792107,-0.610383 },{ -0.795837,-0.605511 },{ -0.799537,-0.600616 },
	{ -0.803208,-0.595699 },{ -0.806848,-0.590760 },{ -0.810457,-0.585798 },{ -0.814036,-0.580814 },{ -0.817585,-0.575808 },{ -0.821103,-0.570781 },{ -0.824589,-0.565732 },{ -0.828045,-0.560662 },
	{ -0.831470,-0.555570 },{ -0.834863,-0.550458 },{ -0.838225,-0.545325 },{ -0.841555,-0.540171 },{ -0.844854,-0.534998 },{ -0.848120,-0.529804 },{ -0.851355,-0.524590 },{ -0.854558,-0.519356 },
	{ -0.857729,-0.514103 },{ -0.860867,-0.508830 },{ -0.863973,-0.503538 },{ -0.867046,-0.498228 },{ -0.870087,-0.492898 },{ -0.873095,-0.487550 },{ -0.876070,-0.482184 },{ -0.879012,-0.476799 },
	{ -0.881921,-0.471397 },{ -0.884797,-0.465976 },{ -0.887640,-0.460539 },{ -0.890449,-0.455084 },{ -0.893224,-0.449611 },{ -0.895966,-0.444122 },{ -0.898674,-0.438616 },{ -0.901349,-0.433094 },
	{ -0.903989,-0.427555 },{ -0.906596,-0.422000 },{ -0.909168,-0.416430 },{ -0.911706,-0.410843 },{ -0.914210,-0.405241 },{ -0.916679,-0.399624 },{ -0.919114,-0.393992 },{ -0.921514,-0.388345 },
	{ -0.923880,-0.382683 },{ -0.926210,-0.377007 },{ -0.928506,-0.371317 },{ -0.930767,-0.365613 },{ -0.932993,-0.359895 },{ -0.935184,-0.354164 },{ -0.937339,-0.348419 },{ -0.939459,-0.342661 },
	{ -0.941544,-0.336890 },{ -0.943593,-0.331106 },{ -0.945607,-0.325310 },{ -0.947586,-0.319502 },{ -0.949528,-0.313682 },{ -0.951435,-0.307850 },{ -0.953306,-0.302006 },{ -0.955141,-0.296151 },
	{ -0.956940,-0.290285 },{ -0.958703,-0.284408 },{ -0.960431,-0.278520 },{ -0.962121,-0.272621 },{ -0.963776,-0.266713 },{ -0.965394,-0.260794 },{ -0.966976,-0.254866 },{ -0.968522,-0.248928 },
	{ -0.970031,-0.242980 },{ -0.971504,-0.237024 },{ -0.972940,-0.231058 },{ -0.974339,-0.225084 },{ -0.975702,-0.219101 },{ -0.977028,-0.213110 },{ -0.978317,-0.207111 },{ -0.979570,-0.201105 },
	{ -0.980785,-0.195090 },{ -0.981964,-0.189069 },{ -0.983105,-0.183040 },{ -0.984210,-0.177004 },{ -0.985278,-0.170962 },{ -0.986308,-0.164913 },{ -0.987301,-0.158858 },{ -0.988258,-0.152797 },
	{ -0.989177,-0.146730 },{ -0.990058,-0.140658 },{ -0.990903,-0.134581 },{ -0.991710,-0.128498 },{ -0.992480,-0.122411 },{ -0.993212,-0.116319 },{ -0.993907,-0.110222 },{ -0.994565,-0.104122 },
	{ -0.995185,-0.098017 },{ -0.995767,-0.091909 },{ -0.996313,-0.085797 },{ -0.996820,-0.079682 },{ -0.997290,-0.073565 },{ -0.997723,-0.067444 },{ -0.998118,-0.061321 },{ -0.998476,-0.055195 },
	{ -0.998795,-0.049068 },{ -0.999078,-0.042938 },{ -0.999322,-0.036807 },{ -0.999529,-0.030675 },{ -0.999699,-0.024541 },{ -0.999831,-0.018407 },{ -0.999925,-0.012272 },{ -0.999981,-0.006136 }
	};

	const float weights_stage_8[256][2] = {
		{ 1.000000,0.000000 },{ 0.999925,-0.012272 },{ 0.999699,-0.024541 },{ 0.999322,-0.036807 },
		{ 0.998795,-0.049068 },{ 0.998118,-0.061321 },{ 0.997290,-0.073565 },{ 0.996313,-0.085797 },
		{ 0.995185,-0.098017 },{ 0.993907,-0.110222 },{ 0.992480,-0.122411 },{ 0.990903,-0.134581 },
		{ 0.989177,-0.146730 },{ 0.987301,-0.158858 },{ 0.985278,-0.170962 },{ 0.983105,-0.183040 },
		{ 0.980785,-0.195090 },{ 0.978317,-0.207111 },{ 0.975702,-0.219101 },{ 0.972940,-0.231058 },
		{ 0.970031,-0.242980 },{ 0.966976,-0.254866 },{ 0.963776,-0.266713 },{ 0.960431,-0.278520 },
		{ 0.956940,-0.290285 },{ 0.953306,-0.302006 },{ 0.949528,-0.313682 },{ 0.945607,-0.325310 },
		{ 0.941544,-0.336890 },{ 0.937339,-0.348419 },{ 0.932993,-0.359895 },{ 0.928506,-0.371317 },
		{ 0.923880,-0.382683 },{ 0.919114,-0.393992 },{ 0.914210,-0.405241 },{ 0.909168,-0.416430 },
		{ 0.903989,-0.427555 },{ 0.898674,-0.438616 },{ 0.893224,-0.449611 },{ 0.887640,-0.460539 },
		{ 0.881921,-0.471397 },{ 0.876070,-0.482184 },{ 0.870087,-0.492898 },{ 0.863973,-0.503538 },
		{ 0.857729,-0.514103 },{ 0.851355,-0.524590 },{ 0.844854,-0.534998 },{ 0.838225,-0.545325 },
		{ 0.831470,-0.555570 },{ 0.824589,-0.565732 },{ 0.817585,-0.575808 },{ 0.810457,-0.585798 },
		{ 0.803208,-0.595699 },{ 0.795837,-0.605511 },{ 0.788346,-0.615232 },{ 0.780737,-0.624859 },
		{ 0.773010,-0.634393 },{ 0.765167,-0.643832 },{ 0.757209,-0.653173 },{ 0.749136,-0.662416 },
		{ 0.740951,-0.671559 },{ 0.732654,-0.680601 },{ 0.724247,-0.689541 },{ 0.715731,-0.698376 },
		{ 0.707107,-0.707107 },{ 0.698376,-0.715731 },{ 0.689541,-0.724247 },{ 0.680601,-0.732654 },
		{ 0.671559,-0.740951 },{ 0.662416,-0.749136 },{ 0.653173,-0.757209 },{ 0.643832,-0.765167 },
		{ 0.634393,-0.773010 },{ 0.624859,-0.780737 },{ 0.615232,-0.788346 },{ 0.605511,-0.795837 },
		{ 0.595699,-0.803208 },{ 0.585798,-0.810457 },{ 0.575808,-0.817585 },{ 0.565732,-0.824589 },
		{ 0.555570,-0.831470 },{ 0.545325,-0.838225 },{ 0.534998,-0.844854 },{ 0.524590,-0.851355 },
		{ 0.514103,-0.857729 },{ 0.503538,-0.863973 },{ 0.492898,-0.870087 },{ 0.482184,-0.876070 },
		{ 0.471397,-0.881921 },{ 0.460539,-0.887640 },{ 0.449611,-0.893224 },{ 0.438616,-0.898674 },
		{ 0.427555,-0.903989 },{ 0.416430,-0.909168 },{ 0.405241,-0.914210 },{ 0.393992,-0.919114 },
		{ 0.382683,-0.923880 },{ 0.371317,-0.928506 },{ 0.359895,-0.932993 },{ 0.348419,-0.937339 },
		{ 0.336890,-0.941544 },{ 0.325310,-0.945607 },{ 0.313682,-0.949528 },{ 0.302006,-0.953306 },
		{ 0.290285,-0.956940 },{ 0.278520,-0.960431 },{ 0.266713,-0.963776 },{ 0.254866,-0.966976 },
		{ 0.242980,-0.970031 },{ 0.231058,-0.972940 },{ 0.219101,-0.975702 },{ 0.207111,-0.978317 },
		{ 0.195090,-0.980785 },{ 0.183040,-0.983105 },{ 0.170962,-0.985278 },{ 0.158858,-0.987301 },
		{ 0.146730,-0.989177 },{ 0.134581,-0.990903 },{ 0.122411,-0.992480 },{ 0.110222,-0.993907 },
		{ 0.098017,-0.995185 },{ 0.085797,-0.996313 },{ 0.073565,-0.997290 },{ 0.061321,-0.998118 },
		{ 0.049068,-0.998795 },{ 0.036807,-0.999322 },{ 0.024541,-0.999699 },{ 0.012272,-0.999925 },
		{ 0.000000,-1.000000 },{ -0.012272,-0.999925 },{ -0.024541,-0.999699 },{ -0.036807,-0.999322 },
		{ -0.049068,-0.998795 },{ -0.061321,-0.998118 },{ -0.073565,-0.997290 },{ -0.085797,-0.996313 },
		{ -0.098017,-0.995185 },{ -0.110222,-0.993907 },{ -0.122411,-0.992480 },{ -0.134581,-0.990903 },
		{ -0.146730,-0.989177 },{ -0.158858,-0.987301 },{ -0.170962,-0.985278 },{ -0.183040,-0.983105 },
		{ -0.195090,-0.980785 },{ -0.207111,-0.978317 },{ -0.219101,-0.975702 },{ -0.231058,-0.972940 },
		{ -0.242980,-0.970031 },{ -0.254866,-0.966976 },{ -0.266713,-0.963776 },{ -0.278520,-0.960431 },
		{ -0.290285,-0.956940 },{ -0.302006,-0.953306 },{ -0.313682,-0.949528 },{ -0.325310,-0.945607 },
		{ -0.336890,-0.941544 },{ -0.348419,-0.937339 },{ -0.359895,-0.932993 },{ -0.371317,-0.928506 },
		{ -0.382683,-0.923880 },{ -0.393992,-0.919114 },{ -0.405241,-0.914210 },{ -0.416430,-0.909168 },
		{ -0.427555,-0.903989 },{ -0.438616,-0.898674 },{ -0.449611,-0.893224 },{ -0.460539,-0.887640 },
		{ -0.471397,-0.881921 },{ -0.482184,-0.876070 },{ -0.492898,-0.870087 },{ -0.503538,-0.863973 },
		{ -0.514103,-0.857729 },{ -0.524590,-0.851355 },{ -0.534998,-0.844854 },{ -0.545325,-0.838225 },
		{ -0.555570,-0.831470 },{ -0.565732,-0.824589 },{ -0.575808,-0.817585 },{ -0.585798,-0.810457 },
		{ -0.595699,-0.803208 },{ -0.605511,-0.795837 },{ -0.615232,-0.788346 },{ -0.624859,-0.780737 },
		{ -0.634393,-0.773010 },{ -0.643832,-0.765167 },{ -0.653173,-0.757209 },{ -0.662416,-0.749136 },
		{ -0.671559,-0.740951 },{ -0.680601,-0.732654 },{ -0.689541,-0.724247 },{ -0.698376,-0.715731 },
		{ -0.707107,-0.707107 },{ -0.715731,-0.698376 },{ -0.724247,-0.689541 },{ -0.732654,-0.680601 },
		{ -0.740951,-0.671559 },{ -0.749136,-0.662416 },{ -0.757209,-0.653173 },{ -0.765167,-0.643832 },
		{ -0.773010,-0.634393 },{ -0.780737,-0.624859 },{ -0.788346,-0.615232 },{ -0.795837,-0.605511 },
		{ -0.803208,-0.595699 },{ -0.810457,-0.585798 },{ -0.817585,-0.575808 },{ -0.824589,-0.565732 },
		{ -0.831470,-0.555570 },{ -0.838225,-0.545325 },{ -0.844854,-0.534998 },{ -0.851355,-0.524590 },
		{ -0.857729,-0.514103 },{ -0.863973,-0.503538 },{ -0.870087,-0.492898 },{ -0.876070,-0.482184 },
		{ -0.881921,-0.471397 },{ -0.887640,-0.460539 },{ -0.893224,-0.449611 },{ -0.898674,-0.438616 },
		{ -0.903989,-0.427555 },{ -0.909168,-0.416430 },{ -0.914210,-0.405241 },{ -0.919114,-0.393992 },
		{ -0.923880,-0.382683 },{ -0.928506,-0.371317 },{ -0.932993,-0.359895 },{ -0.937339,-0.348419 },
		{ -0.941544,-0.336890 },{ -0.945607,-0.325310 },{ -0.949528,-0.313682 },{ -0.953306,-0.302006 },
		{ -0.956940,-0.290285 },{ -0.960431,-0.278520 },{ -0.963776,-0.266713 },{ -0.966976,-0.254866 },
		{ -0.970031,-0.242980 },{ -0.972940,-0.231058 },{ -0.975702,-0.219101 },{ -0.978317,-0.207111 },
		{ -0.980785,-0.195090 },{ -0.983105,-0.183040 },{ -0.985278,-0.170962 },{ -0.987301,-0.158858 },
		{ -0.989177,-0.146730 },{ -0.990903,-0.134581 },{ -0.992480,-0.122411 },{ -0.993907,-0.110222 },
		{ -0.995185,-0.098017 },{ -0.996313,-0.085797 },{ -0.997290,-0.073565 },{ -0.998118,-0.061321 },
		{ -0.998795,-0.049068 },{ -0.999322,-0.036807 },{ -0.999699,-0.024541 },{ -0.999925,-0.012272 }
	};

	const float weights_stage_7[128][2] = {
		{ 1.000000,0.000000 },{ 0.999699,-0.024541 },
		{ 0.998795,-0.049068 },{ 0.997290,-0.073565 },
		{ 0.995185,-0.098017 },{ 0.992480,-0.122411 },
		{ 0.989177,-0.146730 },{ 0.985278,-0.170962 },
		{ 0.980785,-0.195090 },{ 0.975702,-0.219101 },
		{ 0.970031,-0.242980 },{ 0.963776,-0.266713 },
		{ 0.956940,-0.290285 },{ 0.949528,-0.313682 },
		{ 0.941544,-0.336890 },{ 0.932993,-0.359895 },
		{ 0.923880,-0.382683 },{ 0.914210,-0.405241 },
		{ 0.903989,-0.427555 },{ 0.893224,-0.449611 },
		{ 0.881921,-0.471397 },{ 0.870087,-0.492898 },
		{ 0.857729,-0.514103 },{ 0.844854,-0.534998 },
		{ 0.831470,-0.555570 },{ 0.817585,-0.575808 },
		{ 0.803208,-0.595699 },{ 0.788346,-0.615232 },
		{ 0.773010,-0.634393 },{ 0.757209,-0.653173 },
		{ 0.740951,-0.671559 },{ 0.724247,-0.689541 },
		{ 0.707107,-0.707107 },{ 0.689541,-0.724247 },
		{ 0.671559,-0.740951 },{ 0.653173,-0.757209 },
		{ 0.634393,-0.773010 },{ 0.615232,-0.788346 },
		{ 0.595699,-0.803208 },{ 0.575808,-0.817585 },
		{ 0.555570,-0.831470 },{ 0.534998,-0.844854 },
		{ 0.514103,-0.857729 },{ 0.492898,-0.870087 },
		{ 0.471397,-0.881921 },{ 0.449611,-0.893224 },
		{ 0.427555,-0.903989 },{ 0.405241,-0.914210 },
		{ 0.382683,-0.923880 },{ 0.359895,-0.932993 },
		{ 0.336890,-0.941544 },{ 0.313682,-0.949528 },
		{ 0.290285,-0.956940 },{ 0.266713,-0.963776 },
		{ 0.242980,-0.970031 },{ 0.219101,-0.975702 },
		{ 0.195090,-0.980785 },{ 0.170962,-0.985278 },
		{ 0.146730,-0.989177 },{ 0.122411,-0.992480 },
		{ 0.098017,-0.995185 },{ 0.073565,-0.997290 },
		{ 0.049068,-0.998795 },{ 0.024541,-0.999699 },
		{ 0.000000,-1.000000 },{ -0.024541,-0.999699 },
		{ -0.049068,-0.998795 },{ -0.073565,-0.997290 },
		{ -0.098017,-0.995185 }, { -0.122411,-0.992480 },
		{ -0.146730,-0.989177 }, { -0.170962,-0.985278 },
		{ -0.195090,-0.980785 }, { -0.219101,-0.975702 },
		{ -0.242980,-0.970031 }, { -0.266713,-0.963776 },
		{ -0.290285,-0.956940 }, { -0.313682,-0.949528 },
		{ -0.336890,-0.941544 }, { -0.359895,-0.932993 },
		{ -0.382683,-0.923880 }, { -0.405241,-0.914210 },
		{ -0.427555,-0.903989 }, { -0.449611,-0.893224 },
		{ -0.471397,-0.881921 }, { -0.492898,-0.870087 },
		{ -0.514103,-0.857729 }, { -0.534998,-0.844854 },
		{ -0.555570,-0.831470 }, { -0.575808,-0.817585 },
		{ -0.595699,-0.803208 }, { -0.615232,-0.788346 },
		{ -0.634393,-0.773010 }, { -0.653173,-0.757209 },
		{ -0.671559,-0.740951 }, { -0.689541,-0.724247 },
		{ -0.707107,-0.707107 }, { -0.724247,-0.689541 },
		{ -0.740951,-0.671559 }, { -0.757209,-0.653173 },
		{ -0.773010,-0.634393 }, { -0.788346,-0.615232 },
		{ -0.803208,-0.595699 }, { -0.817585,-0.575808 },
		{ -0.831470,-0.555570 }, { -0.844854,-0.534998 },
		{ -0.857729,-0.514103 }, { -0.870087,-0.492898 },
		{ -0.881921,-0.471397 }, { -0.893224,-0.449611 },
		{ -0.903989,-0.427555 }, { -0.914210,-0.405241 },
		{ -0.923880,-0.382683 }, { -0.932993,-0.359895 },
		{ -0.941544,-0.336890 }, { -0.949528,-0.313682 },
		{ -0.956940,-0.290285 }, { -0.963776,-0.266713 },
		{ -0.970031,-0.242980 }, { -0.975702,-0.219101 },
		{ -0.980785,-0.195090 }, { -0.985278,-0.170962 },
		{ -0.989177,-0.146730 }, { -0.992480,-0.122411 },
		{ -0.995185,-0.098017 }, { -0.997290,-0.073565 },
		{ -0.998795,-0.049068 }, { -0.999699,-0.024541 }};


	const float weights_stage_6[64][2] = {
		{ 1.000000,0.000000 },
		{ 0.998795,-0.049068 },
		{ 0.995185,-0.098017 },
		{ 0.989177,-0.146730 },
		{ 0.980785,-0.195090 },
		{ 0.970031,-0.242980 },
		{ 0.956940,-0.290285 },
		{ 0.941544,-0.336890 },
		{ 0.923880,-0.382683 },
		{ 0.903989,-0.427555 },
		{ 0.881921,-0.471397 },
		{ 0.857729,-0.514103 },
		{ 0.831470,-0.555570 },
		{ 0.803208,-0.595699 },
		{ 0.773010,-0.634393 },
		{ 0.740951,-0.671559 },
		{ 0.707107,-0.707107 },
		{ 0.671559,-0.740951 },
		{ 0.634393,-0.773010 },
		{ 0.595699,-0.803208 },
		{ 0.555570,-0.831470 },
		{ 0.514103,-0.857729 },
		{ 0.471397,-0.881921 },
		{ 0.427555,-0.903989 },
		{ 0.382683,-0.923880 },
		{ 0.336890,-0.941544 },
		{ 0.290285,-0.956940 },
		{ 0.242980,-0.970031 },
		{ 0.195090,-0.980785 },
		{ 0.146730,-0.989177 },
		{ 0.098017,-0.995185 },
		{ 0.049068,-0.998795 },
		{ 0.000000,-1.000000 },
		{ -0.049068,-0.998795 },
		{ -0.098017,-0.995185 },
		{ -0.146730,-0.989177 },
		{ -0.195090,-0.980785 },
		{ -0.242980,-0.970031 },
		{ -0.290285,-0.956940 },
		{ -0.336890,-0.941544 },
		{ -0.382683,-0.923880 },
		{ -0.427555,-0.903989 },
		{ -0.471397,-0.881921 },
		{ -0.514103,-0.857729 },
		{ -0.555570,-0.831470 },
		{ -0.595699,-0.803208 },
		{ -0.634393,-0.773010 },
		{ -0.671559,-0.740951 },
		{ -0.707107,-0.707107 },
		{ -0.740951,-0.671559 },
		{ -0.773010,-0.634393 },
		{ -0.803208,-0.595699 },
		{ -0.831470,-0.555570 },
		{ -0.857729,-0.514103 },
		{ -0.881921,-0.471397 },
		{ -0.903989,-0.427555 },
		{ -0.923880,-0.382683 },
		{ -0.941544,-0.336890 },
		{ -0.956940,-0.290285 },
		{ -0.970031,-0.242980 },
		{ -0.980785,-0.195090 },
		{ -0.989177,-0.146730 },
		{ -0.995185,-0.098017 },
		{ -0.998795,-0.049068 }};

	const float weights_stage_5[32][2] = {
		{ 1.000000,0.000000 },
		{ 0.995185,-0.098017 },
		{ 0.980785,-0.195090 },
		{ 0.956940,-0.290285 },
		{ 0.923880,-0.382683 },
		{ 0.881921,-0.471397 },
		{ 0.831470,-0.555570 },
		{ 0.773010,-0.634393 },
		{ 0.707107,-0.707107 },
		{ 0.634393,-0.773010 },
		{ 0.555570,-0.831470 },
		{ 0.471397,-0.881921 },
		{ 0.382683,-0.923880 },
		{ 0.290285,-0.956940 },
		{ 0.195090,-0.980785 },
		{ 0.098017,-0.995185 },
		{ 0.000000,-1.000000 },
		{ -0.098017,-0.995185 },
		{ -0.195090,-0.980785 },
		{ -0.290285,-0.956940 },
		{ -0.382683,-0.923880 },
		{ -0.471397,-0.881921 },
		{ -0.555570,-0.831470 },
		{ -0.634393,-0.773010 },
		{ -0.707107,-0.707107 },
		{ -0.773010,-0.634393 },
		{ -0.831470,-0.555570 },
		{ -0.881921,-0.471397 },
		{ -0.923880,-0.382683 },
		{ -0.956940,-0.290285 },
		{ -0.980785,-0.195090 },
		{ -0.995185,-0.098017 }};

	const float weights_stage_4[16][2] = {
		{ 1.000000,0.000000 },
		{ 0.980785,-0.195090 },
		{ 0.923880,-0.382683 },
		{ 0.831470,-0.555570 },
		{ 0.707107,-0.707107 },
		{ 0.555570,-0.831470 },
		{ 0.382683,-0.923880 },
		{ 0.195090,-0.980785 },
		{ 0.000000,-1.000000 },
		{ -0.195090,-0.980785 },
		{ -0.382683,-0.923880 },
		{ -0.555570,-0.831470 },
		{ -0.707107,-0.707107 },
		{ -0.831470,-0.555570 },
		{ -0.923880,-0.382683 },
		{ -0.980785,-0.195090 }};

	const float weights_stage_3[8][2] = {
		{ 1.000000,0.000000 },
		{ 0.923880,-0.382683 },
		{ 0.707107,-0.707107 },
		{ 0.382683,-0.923880 },
		{ 0.000000,-1.000000 },
		{ -0.382683,-0.923880 },
		{ -0.707107,-0.707107 },
		{ -0.923880,-0.382683 }};

	const float weights_stage_2[4][2] = {
		{ 1.000000,0.000000 },
		{ 0.707107,-0.707107 },
		{ 0.000000,-1.000000 },
		{ -0.707107,-0.707107 }};

	const float weights_stage_1[2][2] = {
		{ 1.000000,0.000000 },
		{ 0.000000,-1.000000 }};

	const float weights_stage_0[1][2] = {
		{ 1.000000,0.000000 }};


	float2 new_a, new_b;

	// select appropriate delay path depending where we are in the current index
	// Swap input halfway through
	unsigned short MASK = mask;
	unsigned short current_index = delay_index[0];
	if (Delay == 0)
	{
		current_index = index;
		new_a = a;
		new_b = b;
	}
	else
	{
		if ((current_index & MASK))
		{
			new_a = delay_b[0];
			new_b = delay_b_n[0];
		}
		else
		{
			new_a = delay_a[0];
			new_b = a;
		}
	}

	// Now calculate butterfly
	// Look up weights to use based on current index.
	float2 w;

	unsigned short wi = (((index - Delay) * n) & (0x1ff)) >> (9 - _STAGE_);
	if (_STAGE_ == 0)
	{
		w[0] = weights_stage_0[wi][0];
		w[1] = weights_stage_0[wi][1];
	}	
	if (_STAGE_ == 1)
	{
		w[0] = weights_stage_1[wi][0];
		w[1] = weights_stage_1[wi][1];
	}	
	if (_STAGE_ == 2)
	{
		w[0] = weights_stage_2[wi][0];
		w[1] = weights_stage_2[wi][1];
	}	
	if (_STAGE_ == 3)
	{
		w[0] = weights_stage_3[wi][0];
		w[1] = weights_stage_3[wi][1];
	}	
	if (_STAGE_ == 4)
	{
		w[0] = weights_stage_4[wi][0];
		w[1] = weights_stage_4[wi][1];
	}	
	if (_STAGE_ == 5)
	{
		w[0] = weights_stage_5[wi][0];
		w[1] = weights_stage_5[wi][1];
	}	
	if (_STAGE_ == 6)
	{
		w[0] = weights_stage_6[wi][0];
		w[1] = weights_stage_6[wi][1];
	}	
	if (_STAGE_ == 7)
	{
		w[0] = weights_stage_7[wi][0];
		w[1] = weights_stage_7[wi][1];
	}	
	if (_STAGE_ == 8)
	{
		w[0] = weights_stage_8[wi][0];
		w[1] = weights_stage_8[wi][1];
	}	
	if (_STAGE_ == 9)
	{
		w[0] = weights_stage_9[wi][0];
		w[1] = weights_stage_9[wi][1];
	}	

	ButterFly_fpga(new_a, new_b, a_out, b_out, w);

	// Create shift register to delay outputs accordingly
	if (Delay != 0)
	{
#pragma unroll
		for (int p = 0; p < (Delay - 1); p++)
		{
			delay_a[p] = delay_a[p + 1];
			delay_b_n[p] = delay_b_n[p + 1];
			delay_index[p] = delay_index[p + 1];
		}
		delay_a[Delay - 1] = a;
		delay_b_n[Delay - 1] = b;
		delay_index[Delay - 1] = index;


#pragma unroll
		for (int p = 0; p < ((Delay << 1) - 1); p++)
		{
			delay_b[p] = delay_b[p + 1];
		}
		delay_b[(Delay << 1) - 1] = b;
	}
}

/*
  1024 FFT pipline.
  This is single word in single word out pipeline used for by 1D, 2D and 3D transforms

  The latency of this pipeline is (511 + 512 + 512)
*/
float4 FFT_1d_1024_pipeline(float4 in,
	float2 delay_a[11][MAX_DELAY], // Gets delayed LOG2N
	float2 delay_b[11][MAX_DELAY * 2], // Gets delayed LOG2N*2
	float2 delay_b_n[11][MAX_DELAY], // Gets delayed LOG"N
	unsigned short delay_index[11][MAX_DELAY], // Delay index by LOGN!
	float2 A[2048],
	float2 QA[1024],
	float2 QB[1024],
	unsigned short i)
{
	// Precomputed twiddle addresses.
	const unsigned short address_reorder_LUT[1024] = {
		0,512,256,768,128,640,384,896,64,576,320,832,192,704,448,960,32,544,288,800,160,672,416,928,96,608,352,864,224,736,480,992,
		16,528,272,784,144,656,400,912,80,592,336,848,208,720,464,976,48,560,304,816,176,688,432,944,112,624,368,880,240,752,496,1008,
		8,520,264,776,136,648,392,904,72,584,328,840,200,712,456,968,40,552,296,808,168,680,424,936,104,616,360,872,232,744,488,1000,
		24,536,280,792,152,664,408,920,88,600,344,856,216,728,472,984,56,568,312,824,184,696,440,952,120,632,376,888,248,760,504,1016,
		4,516,260,772,132,644,388,900,68,580,324,836,196,708,452,964,36,548,292,804,164,676,420,932,100,612,356,868,228,740,484,996,
		20,532,276,788,148,660,404,916,84,596,340,852,212,724,468,980,52,564,308,820,180,692,436,948,116,628,372,884,244,756,500,1012,
		12,524,268,780,140,652,396,908,76,588,332,844,204,716,460,972,44,556,300,812,172,684,428,940,108,620,364,876,236,748,492,1004,
		28,540,284,796,156,668,412,924,92,604,348,860,220,732,476,988,60,572,316,828,188,700,444,956,124,636,380,892,252,764,508,1020,
		2,514,258,770,130,642,386,898,66,578,322,834,194,706,450,962,34,546,290,802,162,674,418,930,98,610,354,866,226,738,482,994,
		18,530,274,786,146,658,402,914,82,594,338,850,210,722,466,978,50,562,306,818,178,690,434,946,114,626,370,882,242,754,498,1010,
		10,522,266,778,138,650,394,906,74,586,330,842,202,714,458,970,42,554,298,810,170,682,426,938,106,618,362,874,234,746,490,1002,
		26,538,282,794,154,666,410,922,90,602,346,858,218,730,474,986,58,570,314,826,186,698,442,954,122,634,378,890,250,762,506,1018,
		6,518,262,774,134,646,390,902,70,582,326,838,198,710,454,966,38,550,294,806,166,678,422,934,102,614,358,870,230,742,486,998,
		22,534,278,790,150,662,406,918,86,598,342,854,214,726,470,982,54,566,310,822,182,694,438,950,118,630,374,886,246,758,502,1014,
		14,526,270,782,142,654,398,910,78,590,334,846,206,718,462,974,46,558,302,814,174,686,430,942,110,622,366,878,238,750,494,1006,
		30,542,286,798,158,670,414,926,94,606,350,862,222,734,478,990,62,574,318,830,190,702,446,958,126,638,382,894,254,766,510,1022,
		1,513,257,769,129,641,385,897,65,577,321,833,193,705,449,961,33,545,289,801,161,673,417,929,97,609,353,865,225,737,481,993,
		17,529,273,785,145,657,401,913,81,593,337,849,209,721,465,977,49,561,305,817,177,689,433,945,113,625,369,881,241,753,497,1009,
		9,521,265,777,137,649,393,905,73,585,329,841,201,713,457,969,41,553,297,809,169,681,425,937,105,617,361,873,233,745,489,1001,
		25,537,281,793,153,665,409,921,89,601,345,857,217,729,473,985,57,569,313,825,185,697,441,953,121,633,377,889,249,761,505,1017,
		5,517,261,773,133,645,389,901,69,581,325,837,197,709,453,965,37,549,293,805,165,677,421,933,101,613,357,869,229,741,485,997,
		21,533,277,789,149,661,405,917,85,597,341,853,213,725,469,981,53,565,309,821,181,693,437,949,117,629,373,885,245,757,501,1013,
		13,525,269,781,141,653,397,909,77,589,333,845,205,717,461,973,45,557,301,813,173,685,429,941,109,621,365,877,237,749,493,1005,
		29,541,285,797,157,669,413,925,93,605,349,861,221,733,477,989,61,573,317,829,189,701,445,957,125,637,381,893,253,765,509,1021,
		3,515,259,771,131,643,387,899,67,579,323,835,195,707,451,963,35,547,291,803,163,675,419,931,99,611,355,867,227,739,483,995,
		19,531,275,787,147,659,403,915,83,595,339,851,211,723,467,979,51,563,307,819,179,691,435,947,115,627,371,883,243,755,499,1011,
		11,523,267,779,139,651,395,907,75,587,331,843,203,715,459,971,43,555,299,811,171,683,427,939,107,619,363,875,235,747,491,1003,
		27,539,283,795,155,667,411,923,91,603,347,859,219,731,475,987,59,571,315,827,187,699,443,955,123,635,379,891,251,763,507,1019,
		7,519,263,775,135,647,391,903,71,583,327,839,199,711,455,967,39,551,295,807,167,679,423,935,103,615,359,871,231,743,487,999,
		23,535,279,791,151,663,407,919,87,599,343,855,215,727,471,983,55,567,311,823,183,695,439,951,119,631,375,887,247,759,503,1015,
		15,527,271,783,143,655,399,911,79,591,335,847,207,719,463,975,47,559,303,815,175,687,431,943,111,623,367,879,239,751,495,1007,
		31,543,287,799,159,671,415,927,95,607,351,863,223,735,479,991,63,575,319,831,191,703,447,959,127,639,383,895,255,767,511,1023
	};

	unsigned short delay = 1;
	unsigned short mask = 0x1;
	unsigned short a = 1;
	unsigned short n = 512;



	// control inputs here with arrays for now!

	float2 pairs[11][2];

	// Delay of 512 to load inputs
	// Delay of 511 for outputs to be ready
	// Delay fo 512 for Q output to be ready!

	// Fill first pairs
	unsigned short i_512 = i & 0x3ff;

	A[i_512 << 1][0] = in[0];
	A[i_512 << 1][1] = in[1];
	A[(i_512 << 1) + 1][0] = in[2];
	A[(i_512 << 1) + 1][1] = in[3];

	unsigned short addr0 = address_reorder_LUT[(i & 0x1ff) << 1];
	unsigned short addr1 = address_reorder_LUT[((i & 0x1ff) << 1) + 1];
	// Double buffer offet
	unsigned short buffer_offset = ((i + 512) & 0x200) << 1;
	pairs[0][0] = A[addr0 + buffer_offset];
	pairs[0][1] = A[addr1 + buffer_offset];
	unsigned short fft_index = i;

	Stage_fpga<0>(pairs[0][0], pairs[0][1], &pairs[1][0], &pairs[1][1], fft_index, 0, 1, 512, 0x1, delay_a[0], delay_b[0], delay_b_n[0], delay_index[0]);
	Stage_fpga<1>(pairs[1][0], pairs[1][1], &pairs[2][0], &pairs[2][1], fft_index, 1, 2, 256, 0x1, delay_a[1], delay_b[1], delay_b_n[1], delay_index[1]);
	Stage_fpga<2>(pairs[2][0], pairs[2][1], &pairs[3][0], &pairs[3][1], fft_index - (1), 2, 4, 128, 0x2, delay_a[2], delay_b[2], delay_b_n[2], delay_index[2]);
	Stage_fpga<3>(pairs[3][0], pairs[3][1], &pairs[4][0], &pairs[4][1], fft_index - (3), 4, 8, 64, 0x4, delay_a[3], delay_b[3], delay_b_n[3], delay_index[3]);
	Stage_fpga<4>(pairs[4][0], pairs[4][1], &pairs[5][0], &pairs[5][1], fft_index - (7), 8, 16, 32, 0x8, delay_a[4], delay_b[4], delay_b_n[4], delay_index[4]);
	Stage_fpga<5>(pairs[5][0], pairs[5][1], &pairs[6][0], &pairs[6][1], fft_index - (15), 16, 32, 16, 0x10, delay_a[5], delay_b[5], delay_b_n[5], delay_index[5]);
	Stage_fpga<6>(pairs[6][0], pairs[6][1], &pairs[7][0], &pairs[7][1], fft_index - (31), 32, 64, 8, 0x20, delay_a[6], delay_b[6], delay_b_n[6], delay_index[6]);
	Stage_fpga<7>(pairs[7][0], pairs[7][1], &pairs[8][0], &pairs[8][1], fft_index - (63), 64, 128, 4, 0x40, delay_a[7], delay_b[7], delay_b_n[7], delay_index[7]);
	Stage_fpga<8>(pairs[8][0], pairs[8][1], &pairs[9][0], &pairs[9][1], fft_index - (127), 128, 256, 2, 0x80, delay_a[8], delay_b[8], delay_b_n[8], delay_index[8]);
	Stage_fpga<9>(pairs[9][0], pairs[9][1], &pairs[10][0], &pairs[10][1], fft_index - (255), 256, 512, 1, 0x100, delay_a[9], delay_b[9], delay_b_n[9], delay_index[9]);

	unsigned short q = (i - (511 + 512));

	// Delay buffer, not a shift register this time
	unsigned short q_in = q & 0x3ff;
	QA[q_in][0] = pairs[10][0][0];
	QA[q_in][1] = pairs[10][0][1];
	QB[q_in][0] = pairs[10][1][0];
	QB[q_in][1] = pairs[10][1][1];


	unsigned short q_out = q_in - 512;
	unsigned short block_offset_a = (q_out & 0x200) ? 512 : 0;
	unsigned short block_offset_b = (q_out & 0x200) ? 0 : 512;
	float4 ret;
	unsigned short q_out_b;
	unsigned short q_out_a;

	ret[0] = 0;
	ret[1] = 0;
	ret[2] = 0;
	ret[3] = 0;
	if (q_out & 0x100)
	{
		q_out_b = (block_offset_b + ((q_out - 512) << 1)) & 0x3ff;
		float2 a, b;
		a = QB[q_out_b];
		b = QB[q_out_b + 1];
		ret[0] = a[0];
		ret[1] = a[1];
		ret[2] = b[0];
		ret[3] = b[1];
	}
	else
	{
		q_out_a = (block_offset_a + (q_out << 1)) & 0x3ff;
		float2 a, b;
		a = QA[q_out_a];
		b = QA[q_out_a + 1];
		ret[0] = a[0];
		ret[1] = a[1];
		ret[2] = b[0];
		ret[3] = b[1];
	}
	i++;
	return ret;
}





